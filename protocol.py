from typing import Generic, Tuple, TypeVar
T = TypeVar("T")
class Protocol(Generic[T]):
    def __init__(self) -> None:
        pass

    def __str__(self) -> str:
        return "protocol"

    def projectStr(self, p : str) -> None:
        self._write(p)

    def projectFile(self, file : str) -> None:
        f = open(file, "r") 
        src = f.read()
        f.close()

        self._write(src)

    def _getLocalProjections(self, protocol : str) -> Tuple[dict, list]:
        roles = dict()
        types = []
        channels = dict()
        portNum = 5000

        for line in protocol.split(";"):
            if (line.strip() == ""): continue

            rolePair, typ = [_.strip() for _ in line.split(':')]
            a, b = [x.strip() for x in rolePair.split("->")]
            types.append(typ)

            k = f"{a}{b}"
            if not k in channels:
                channels[k] = portNum
                channels[f"{b}{a}"] = portNum
                portNum = portNum + 1

            if not a in roles:
                roles[a] = []
            roles[a].append(("send(FILL_THIS_OUT)", b))
            
            if not b in roles:
                roles[b] = []
            roles[b].append(("recv()", a))

        return (roles, types, channels)

    def _write(self, protocol: str) -> None:
        roles, types, channels = self._getLocalProjections(protocol)

        print(roles, types, channels)

        for role, instructions in roles.items():
            with open(f"roles/{role}.py", "w+", encoding='utf-8') as f:
                f.write("# THIS FILE IS AUTOGENERATED\n")
                f.write("from channel import Channel\n\n")

                channelNum = 0
                for ins, rec in instructions:
                    ch = channels[f"{role}{rec}"]
                    f.write(f"ch{channelNum}: Channel = Channel({types[channelNum]}, {ch})\n")
                    channelNum = channelNum + 1

                f.write("\n")

                channelNum = 0
                for ins, rec in instructions:
                    f.write(f"ch{channelNum}.{ins}\n")
                    channelNum = channelNum + 1